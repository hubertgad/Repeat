@using Microsoft.AspNetCore.Identity
@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager
        @{var rv = ViewContext.RouteData.Values;
        string page = $"{rv["page"]}".ToLowerInvariant();}

<ul class="ml-auto navbar-nav">
    @if (SignInManager.IsSignedIn(User))
    {
        <li class="nav-item">
            <a id="manage" class="btn btn-nav @(page.StartsWith("/account") ?  "active" : "")" asp-area="Identity" asp-page="/Account/Manage/Index" title="Manage">@UserManager.GetUserName(User)</a>
        </li>
        <li class="nav-item">
            <form id="logoutForm" class="form-inline" asp-area="Identity" asp-page="/Account/Logout" asp-route-returnUrl="@Url.Page("/Index", new { area = "" })">
                <button id="logout" type="submit" class="btn btn-nav">Logout</button>
            </form>
        </li>
    }
    else
    {
        <li class="nav-item">
            <a class="btn btn-nav @(page.StartsWith("/account/register") ?  "active" : "")" id="register" asp-area="Identity" asp-page="/Account/Register">Register</a>
        </li>
        <li class="nav-item">
            <a class="btn btn-nav @(page.StartsWith("/account/login") ?  "active" : "")" id="login" asp-area="Identity" asp-page="/Account/Login">Login</a>
        </li>
    }
</ul>